The server is an entity responsible for redistributing audio packets to clients.
The clients is entity responsible for gather audio data and sending it to the server.

All bytes should be encoded in big endian.

All TCP packets follow this structure:
[packet id (2 bytes)][packet length (4 bytes)][packet body (n bytes, specified by packet length)]

The following packet id are defined:
CONNECT         0x00
CONNECT_OK      0x01
CONNECT_FAILED  0x02
PING            0x03
PONG            0x04
NEW_USER        0x05
BYE_USER        0x06

String in packet body should follow this format:
[length (4 bytes)][ utf-8 encoded string (n bytes, specified by length) ]

In order to connect to a server,
Step 1:
Establish a TCP connection to the server, sends the following packet:

CONNECT (username: String)

where username is the username of the client.

Step 2:
The server responses with either the following packet

CONNECT_OK (user_id: Int32)

where id is a 32-bit POSITIVE integer that will be used to identify the client in the future, or

CONNECT_FAILED (reason: String)

where reason is a packet that explains why the client cannot connect to the server.

Step 3:
The client would proceed to send the following UDP packets to the server every 30ms:

[user_id (4 bytes)][counter (8 bytes)][audio data (~200 to 600 bytes)]

where user_id was the integer previously assigned by the server, counter is a 64-bit integer that is
incremented every time a packet is sent, and audio data is OPUS.NET compressed audio data.

all integers should be encoded into big endian bytes.

Step 4:
The server would routinely send a PING command to the client. The client MUST respond with PONG.
If the client fails to respond with PONG within a fixed amount of time deemed by the server, the server
would consider the client disconnected.

Step 5.
To terminate the connection, cut off the TCP connection with the server.

Other commands:
When a new user joins, the following packet is sent:
NEW_USER (user_id: Int32) (username: String)

user_id corresponds to the opus multistream channel index.

When a user leaves, the following packet is sent:
BYE_USER (user_id: Int32)